import os
import asyncio
import threading
import logging
import httpx
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)
from telegram.request import HTTPXRequest

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
TOKEN = os.getenv("TOKEN")
ALLOWED_CHAT_IDS = [int(x.strip()) for x in os.getenv("ALLOWED_CHAT_IDS", "").split(",") if x.strip()]
NOTIFY_CHAT_ID = int(os.getenv("NOTIFY_CHAT_ID", "0"))

BANNED_WORDS_FILE = "banned_words.txt"
JOIN_LOG = "join_log.txt"
DELETE_LOG = "deleted_messages.txt"
CHAT_LOG = "bot_chats.log"

banned_words = []

def is_allowed_chat(chat_id: int) -> bool:
    return not ALLOWED_CHAT_IDS or chat_id in ALLOWED_CHAT_IDS

def load_banned_words():
    global banned_words
    if not os.path.exists(BANNED_WORDS_FILE):
        banned_words = []
    else:
        with open(BANNED_WORDS_FILE, "r", encoding="utf-8") as f:
            banned_words = [w.strip().lower() for w in f if w.strip()]

def save_banned_words(words):
    with open(BANNED_WORDS_FILE, "w", encoding="utf-8") as f:
        for w in words:
            f.write(w + "\n")
    load_banned_words()

load_banned_words()

async def is_user_admin(update: Update, user_id: int) -> bool:
    member = await update.effective_chat.get_member(user_id)
    return member.status in ("administrator", "creator")

async def delayed_delete(bot, chat_id, message_id, delay=60):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except:
        pass

# === –ö–æ–º–∞–Ω–¥—ã ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type != "private" and not is_allowed_chat(chat.id):
        return
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–≤–æ–¥–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ —á–∞—Ç–µ.\n"
        "–£–¥–∞–ª—è—é —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ñ–∏–ª—å—Ç—Ä—É—é –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –ª–æ–≥–∏—Ä—É—é —Å–æ–±—ã—Ç–∏—è.\n\n"
        "–î–ª—è —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π ‚Äî –Ω–∞–ø–∏—à–∏ /help\n"
        "–ü–æ –¥–æ—Ä–∞–±–æ—Ç–∫–∞–º –æ–±—Ä–∞—â–∞–π—Å—è –∫ @v_golikov"
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    await update.message.reply_text(f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—Ä–µ–º—è: {now}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n"
        "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –≤—ã—Ö–æ–¥, —Ç–µ–º—ã, –∑–∞–∫—Ä–µ–ø—ã –∏ —Ç.–ø.)\n"
        "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º\n"
        "‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ —É–¥–∞–ª–µ–Ω–∏–π\n\n"
        "üìå –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
        "/addword <—Å–ª–æ–≤–æ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "/delword <—Å–ª–æ–≤–æ> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "/listwords ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤"
    )

async def add_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_chat(update.effective_chat.id):
        return
    if not await is_user_admin(update, update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    if len(context.args) != 1:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addword <—Å–ª–æ–≤–æ>")
        return
    word = context.args[0].lower()
    if word in banned_words:
        await update.message.reply_text(f"‚ö†Ô∏è '{word}' —É–∂–µ –µ—Å—Ç—å.")
    else:
        banned_words.append(word)
        save_banned_words(banned_words)
        await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

async def del_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_chat(update.effective_chat.id):
        return
    if not await is_user_admin(update, update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    if len(context.args) != 1:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delword <—Å–ª–æ–≤–æ>")
        return
    word = context.args[0].lower()
    if word not in banned_words:
        await update.message.reply_text(f"‚ö†Ô∏è '{word}' –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
    else:
        banned_words.remove(word)
        save_banned_words(banned_words)
        await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ.")

async def list_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_chat(update.effective_chat.id):
        return
    if not banned_words:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    else:
        await update.message.reply_text("üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n" + "\n".join(banned_words))

async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if not is_allowed_chat(chat.id):
        return
    for user in update.message.new_chat_members:
        try:
            await update.message.delete()
        except:
            pass
        msg = await context.bot.send_message(
            chat_id=chat.id,
            text=f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.mention_html()}!",
            parse_mode="HTML",
        )
        with open(JOIN_LOG, "a", encoding="utf-8") as f:
            f.write(f"{datetime.now()} ‚Äî {user.full_name} (@{user.username}) ID:{user.id} –≤—Å—Ç—É–ø–∏–ª(–∞) –≤ {chat.title}\n")
        asyncio.create_task(delayed_delete(context.bot, chat.id, msg.message_id, delay=300))

async def delete_system(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not is_allowed_chat(update.effective_chat.id):
        return
    try:
        if (
            msg.new_chat_members
            or msg.left_chat_member
            or msg.new_chat_photo
            or msg.delete_chat_photo
            or msg.pinned_message
            or msg.group_chat_created
            or msg.supergroup_chat_created
            or msg.message_auto_delete_timer_changed
            or getattr(msg, "forum_topic_created", None)
            or getattr(msg, "forum_topic_closed", None)
            or getattr(msg, "forum_topic_reopened", None)
            or getattr(msg, "general_forum_topic_hidden", None)
            or getattr(msg, "general_forum_topic_unhidden", None)
        ):
            await msg.delete()
    except:
        pass

async def filter_bad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text or not is_allowed_chat(update.effective_chat.id):
        return
    if any(word in msg.text.lower() for word in banned_words):
        try:
            await msg.delete()
        except:
            pass
        with open(DELETE_LOG, "a", encoding="utf-8") as f:
            f.write(
                f"{datetime.now()} ‚Äî –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{msg.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'}: {msg.text}\n"
            )

async def log_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if not chat:
        return
    log_line = f"{datetime.now()} ‚Äî {chat.type.upper()} ‚Äî {chat.title or '–õ–∏—á–∫–∞'} (ID: {chat.id})\n"
    with open(CHAT_LOG, "a", encoding="utf-8") as f:
        f.write(log_line)

def run_healthcheck():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"I'm alive!")
    server = HTTPServer(("0.0.0.0", 10000), Handler)
    server.serve_forever()

threading.Thread(target=run_healthcheck, daemon=True).start()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º httpx —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
request = HTTPXRequest(
    connect_timeout=10.0,
    read_timeout=30.0,
    write_timeout=30.0,
    pool_timeout=30.0,
)

app = ApplicationBuilder().token(TOKEN).request(request).build()

# –ö–æ–º–∞–Ω–¥—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("status", status_command))
app.add_handler(CommandHandler("addword", add_word))
app.add_handler(CommandHandler("delword", del_word))
app.add_handler(CommandHandler("listwords", list_words))

# –°–æ–±—ã—Ç–∏—è
app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
app.add_handler(MessageHandler(filters.StatusUpdate.ALL, delete_system))
app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, filter_bad))
app.add_handler(MessageHandler(filters.ALL, log_chat), group=-1)

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run_polling(ready=notify_on_startup)

